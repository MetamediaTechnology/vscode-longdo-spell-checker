name: Node.js CI
on:
  push:
    branches: [ staging, main ]
  pull_request:
    branches: [ staging, main ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install Xvfb
      run: sudo apt-get install -y xvfb
    - name: Start Xvfb
      run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    - run: npm ci
    - run: npm run lint
    - name: Run tests with Xvfb
      run: |
        export DISPLAY=:99
        npm test

  package:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      - name: Install vsce
        run: npm install -g @vscode/vsce
      - name: Package Extension
        run: vsce package
      - name: Upload VSIX
        uses: actions/upload-artifact@v4
        with:
          name: extension-vsix
          path: "*.vsix"
          retention-days: 1
  
  release:
    needs: package
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download packaged VSIX
        uses: actions/download-artifact@v4
        with:
          name: extension-vsix
          path: .

      - name: Get version from package.json
        id: get_version
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release v${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.vsix
          asset_name: longdo-spell-checker-${{ steps.get_version.outputs.VERSION }}.vsix
          asset_content_type: application/octet-stream